@using VCMS.Lib.Models;
@model IEnumerable<Project>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_SharedLayout.cshtml";
    var categories = ViewBag.Categories as IEnumerable<Homeclick.Models.Category>;
    var category_id = Request.Params["category_id"];
}

    <div class="main-body">
        <div id="container" class="clearfix" data-ref="container">

            <div class="gap" data-ref="first-gap"></div>
            <div class="gap"></div>
            <div class="gap"></div>
        </div>

        <div class="control-bar">
            <ul class="pager-list pagination">
                <!-- Pagination buttons will be generated here -->
            </ul>
        </div>
    </div>

@section breadcrumb {
<ul>
    <li><a href="../">Home</a></li>
    <li>Dự án</li>
</ul>
}

@section styles {
    <link href="~/Content/Project.css" rel="stylesheet" />
    <style>
        #projectsGrid {
            overflow:hidden;
        }

    </style>
}

@section scripts {
    <script src="~/Scripts/Plugins/mixitup/mixitup.min.js"></script>
    <script type='text/javascript' src="~/Scripts/Plugins/jlinq/jlinq.js"></script>

    <script>
        var aip = null,
            mixer = null,
            data = [],
            container = document.querySelector('[data-ref="container"]');
            firstGap = document.querySelector('[data-ref="first-gap"]');
            var mixState = true;

            $('.category-link').bind('click', function (event) {
                if (mixState) {
                    var $selectedCategory = $('.category-link.active');
                    $selectedCategory.removeClass('active');

                    selectedCategory = this;
                    $(selectedCategory).addClass('active');

                    var category = $(selectedCategory).data('category');

                    filters = [];
                    var selectedCategory = $('li.category-link.active[data-category]');
                    if (category && selectedCategory.length != 0)
                        filters.push({ 'fieldName': 'type', 'fieldValue': selectedCategory.data('category') });

                    selectChanged(data, filters);
                }
                event.preventDefault();
            });



            $("#filterButton").on('click', function () {
                var filters = [];

                var selectedCategory = $('li.category-link.active[data-category]');
                if (selectedCategory.length != 0)
                    filters.push({ 'fieldName': 'type', 'fieldValue': selectedCategory.data('category'), 'valueType': 'int' });

                var $stateSlect = $("#states");
                if ($stateSlect.val())
                    filters.push({ 'fieldName': 'state', 'fieldValue': $stateSlect.val() });

                var statusValue = $('input[name="status"]:checked').val();
                filters.push({ 'fieldName': 'statu', 'fieldValue': statusValue, 'valueType': 'int' });

                var nameValue = $('#filterTextBox').val();
                if (nameValue)
                    filters.push({ 'fieldName': 'name', 'fieldValue': nameValue, 'valueType': 'string' });

                selectChanged(data, filters);
                event.preventDefault();
            });

            function selectChanged(data, filters) {
                var result = data;

                for (var i = 0; i < filters.length; i++) {
                    if (filters[i]['valueType'] == "string")
                        result = jLinq.from(result).contains(filters[i]['fieldName'], filters[i]['fieldValue']).select();
                    else
                        result = jLinq.from(result).equals(filters[i]['fieldName'], parseInt(filters[i]['fieldValue'])).select();
                }
                return mixer.dataset(result);
            }

            function render(item) {
                var obj = '<div class="project-tile col-sm-6 col-md-4" data-ref="item">' +
                            '<div class="project-tile-image">' +
                                '<img width="650" height="420" src="' + item.image + '" class="attachment-project-image size-project-image" alt="">' +
                            '</div>' +
                            '<div class="project-tile-overlay">' +
                                '<h4>' + item.name + '</h4>' +
                                '<a href="' + item.link + '" class="button tiny">Xem chi tiết <i class="fa fa-search" aria-hidden="true"></i></a>' +
                            '</div>' +
                        '</div>'
                return obj;
            }

            jQuery(document).ready(function ($) {
                var url = '@Url.Action("GetProjectsData")';

                var selectedCategory = $('li.category-link.active[data-category]');

                data = $.getJsonFromUrl(url, { 'category_id': '-1' });

                for (var i = 0; i < data.length; i++) {
                    data[i]['image'] = '@Url.GetImageUploadFolder()' + '/' + data[i]['image'];
                    data[i]['link'] = '@Url.Action("details")?project_id=' + data[i]['id'];
                }

                var currentData = (selectedCategory.length != 0) ?
                    jLinq.from(data).equals('type', parseInt(selectedCategory.first().data("category"))).select()
                    : data;

                for (var i = 0; i < currentData.length; i++) {
                    var obj = render(currentData[i]);
                    $('#container').prepend(obj);
                }

                mixer = mixitup(container, {
                    animation: {
                        queue: true,
                        queueLimit: 5
                    },
                    selectors: {
                        target: '[data-ref="item"]'
                    },
                    layout: {
                        siblingAfter: firstGap
                    },
                    load: {
                        dataset: currentData
                    },
                    data: {
                        uidKey: 'id'
                    },
                    render: {
                        target: function (item) {
                            return render(item);
                        }
                    },
                    callbacks: {
                        onMixStart: function () {
                            mixState = false;
                        },
                        onMixEnd: function(){
                            mixState = true;
                        }
                    }
                })

            });

    </script>
}