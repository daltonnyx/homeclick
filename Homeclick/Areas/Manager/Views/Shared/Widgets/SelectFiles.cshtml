@* Delayeds:
    Libs: JqueryUpload
            Style: @Html.RenderDelayed("jquery-uploads-style")
            Js:    @Html.RenderDelayed("jquery-uploads-js")
    Scripts
        @Html.RenderDelayed("SelectImages-function")
        @Html.RenderDelayed("SelectImages-script")
*@

@using VCMS.Lib.Common
@using VCMS.Lib.Models

@model object

@{ 
    var dic = Model.ToDictionary();
    var Value = dic.ContainsKey("Value") ? dic["Value"] : null;
    var FieldName = dic["FieldName"] as string;
    var Multiple = dic.ContainsKey("Multiple") ? (bool)dic["Multiple"] : false;
    var ContainerId = dic.ContainsKey("ContainerId") ? (string)dic["ContainerId"] : Html.RandomString(32);
    var Accept = dic.ContainsKey("Accept") ? dic["Accept"] as string : string.Empty;
    var FileManagerId = dic.ContainsKey("FileManagerId") ? dic["FileManagerId"] as string : null;
    var IsCustomField = dic.ContainsKey("IsCustomField") ? (bool)dic["IsCustomField"] : false;
    var DetailName = dic.ContainsKey("DetailName") ? dic["DetailName"] as string : string.Empty;
    var StartIndex = dic.ContainsKey("StartIndex") ? (int)dic["StartIndex"] : -1;
}

    <div id="@ContainerId" data-is-customfield="@IsCustomField.ToString().ToLower()" @Html.Raw(DetailName !=string.Empty ? string.Format("data-detail-name='{0}'", DetailName) : string.Empty)>
        <div class="file-uploaded">
            @if (Multiple)
            {
                <div class="file-uploaded-border">
                    <ol class="file-list">
                        @if (Multiple && Value != null)
                        {
                            var files = Value as IEnumerable<object>;
                            foreach (var obj in files)
                            {
                                var fileDic = obj.ToDictionary();
                                var fileName = fileDic["FileName"].ToString();
                                var fileId = Path.GetFileNameWithoutExtension(fileName);
                                var fieldName = string.Format("{0}[{1}]", FieldName, StartIndex);
                
                                <li class="file @Html.Raw(IsCustomField ? string.Empty : "form-group-custom-field")">
                                    <input type="checkbox" id="@fileId" />
                                    <label for="@fileId">
                                        <img src="@Url.GetImageUploadFolder()@fileName" />
                                        @if (IsCustomField)
                                        {
                                            if (fileDic.ContainsKey("DetailId"))
                                            {
                                                <input type="hidden" name="@(fieldName + ".Id")" value="@fileDic["DetailId"]" />
                                            }
                                            <input type="hidden" name="@(fieldName + ".FileId")" value="@fileId" />
                                            <input type="hidden" name="@(fieldName + ".Type")" value="@((int)FieldTypes.File)" />
                                            <input type="hidden" name="@(fieldName + ".Name")" value="@DetailName" />
                                        }
                                        else
                                        {
                                            <input type="hidden" name="@fieldName" value="@fileId" />
                                        }
                                    </label>
                                </li>
                                StartIndex++;
                            }
                        }
                    </ol>
                </div>
            }
            else
            {
                if (!Multiple && Value != null)
                {
                    var fileDic = Value.ToDictionary();
                    var fileName = fileDic.ContainsKey("FileName") ? fileDic["FileName"].ToString() : string.Empty;
                    var fieldName = string.Format("{0}[{1}]", FieldName, StartIndex);

                    var fileId = Path.GetFileNameWithoutExtension(fileName);
                    <div class="file-uploaded-single img-thumbnail">
                        <img src="@Url.GetImageUploadFolder()@fileName">
                        @if (IsCustomField)
                        {
                            if (fileDic.ContainsKey("DetailId"))
                            {
                                <input type="hidden" name="@(fieldName + ".Id")" value="@fileDic["DetailId"]" />
                            }
                            <input type="hidden" name="@(fieldName + ".FileId")" value="@fileId" />
                            <input type="hidden" name="@(fieldName + ".Type")" value="@((int)FieldTypes.File)" />
                            <input type="hidden" name="@(fieldName + ".Name")" value="@DetailName" />
                        }
                        else
                        {
                            <input type="hidden" name="@fieldName" value="@fileId" />
                        }
                    </div>
                }
            }
        </div>
        @if (!Multiple)
        {
            <div class="file-upload-empty" @Html.Raw((Value != null) ? "style='display:none'" : "")>
                <span><i>No selected file</i></span>
            </div>
        }

        <div class="clearfix m-t-15">
            @if (FileManagerId != null || FileManagerId != string.Empty)
            {
                <span class="btn btn-circle open-lib m-r-5" data-toggle="modal" data-target="@FileManagerId" data-field-name="@FieldName" data-is-customfield="@IsCustomField.ToString().ToLower()" data-multiple="@Multiple.ToString().ToLower()" data-container-id="@ContainerId">
                    <i class="fa fa-folder"></i>
                </span>
            }
            <span class="btn btn-circle fileinput-button m-r-5">
                <i class="fa fa-upload"></i>
                <input class="fileupload" type="file" name="files" @Html.Raw(Multiple ? "multiple" : string.Empty) accept="@Accept">
            </span>

            <span class="btn btn-circle file-remove-btn" @Html.Raw((Value == null) ? "style='display:none'" : "") data-multiple="@Multiple.ToString().ToLower()" data-container-id="@ContainerId">
                <i class="fa fa-times"></i>
            </span>

            <div class="cssload-container fileuploadProgress" style="display:none">
                <div class="cssload-speeding-wheel"></div>
            </div>
        </div>
    </div>

@using (Html.Delayed("jquery-uploads-style", isOnlyOne: "jquery-uploads-style"))
{
    <link href="~/Areas/Manager/Content/lib/jQueryFileUpload/css/jquery.fileupload.css" rel="stylesheet" />
    <link href="~/Areas/Manager/Content/lib/jQueryFileUpload/css/jquery.fileupload-ui.css" rel="stylesheet" />
}

@using (Html.Delayed(isOnlyOne: "jquery-uploads-js"))
{
    <script src="~/Areas/Manager/Content/lib/jQueryFileUpload/js/vendor/jquery.ui.widget.js"></script>
    <script src="~/Areas/Manager/Content/lib/jQueryFileUpload/js/jquery.iframe-transport.js"></script>
    <script src="~/Areas/Manager/Content/lib/jQueryFileUpload/js/jquery.fileupload.js"></script>
}

@using (Html.Delayed(isOnlyOne: "SelectImagesFunction"))
{
    <script>
        function addImg(containerDivId, isMultiple , file, fieldName) {
            var fileName = file.newFileName + file.ext;
            var $container = $('#' + containerDivId);
            $container.find('.file-upload-empty').hide();
            $container.find('.file-remove-btn').show();
            var isCustomField = $container.data('is-customfield');

            if (isMultiple) {
                var makeId = randomString(32,'A#');
                var $li = $('<li class="file"/>');
                var $input = $('<input type="checkbox"/>').attr('id', makeId).data('file',fileName).appendTo($li);
                var $label = $('<label/>').attr('for', makeId).appendTo($li);
                switch(file.ext){
                    case '.gif': case '.jpg': case '.png': case '.svg':
                        var $img = $('<img/>').attr('src','@Url.GetImageUploadFolder()' + fileName).appendTo($label);
                        break;
                    default:
                        break;
                }
                if (isCustomField){
                    $li.addClass('form-group-custom-field');
                    var detailName = $container.data('detail-name');
                    fieldName = fieldName + '[0]';
                    $('<input type="hidden"/>').attr('name', fieldName + ".FileId").val(file.newFileName).appendTo($label);
                    $('<input type="hidden"/>').attr('name', fieldName + ".Name").val(detailName).appendTo($label);
                    $('<input type="hidden"/>').attr('name', fieldName + ".Type").val(@((int)FieldTypes.File)).appendTo($label);
                }
                else
                    var $hidden = $('<input type="hidden"/>').attr('name', fieldName).val(file.newFileName).appendTo($label);

                $container.find('.file-list').append($li);
            }
            else {
                var $div = $('<div class="file file-uploaded-single img-thumbnail"/>').data('file', fileName).hide();
                switch(file.ext){
                    case '.gif': case '.jpg': case '.png': case '.svg':
                        var $img = $('<img/>').attr('src', '@Url.GetImageUploadFolder()' + fileName).appendTo($div);
                        break;
                    default:
                        var $a = $('<a/>').attr('href', '@Url.GetImageUploadFolder()' + fileName).text(fileName).appendTo($div);
                        break;
                }
                if (isCustomField){
                    var detailName = $container.data('detail-name');
                    fieldName = fieldName + '[0]';
                    $('<input type="hidden"/>').attr('name', fieldName + ".FileId").val(file.newFileName).appendTo($div);
                    $('<input type="hidden"/>').attr('name', fieldName + ".Name").val(detailName).appendTo($div);
                    $('<input type="hidden"/>').attr('name', fieldName + ".Type").val(@((int)FieldTypes.File)).appendTo($div);
                }
                else
                    var $inp = $('<input type="hidden"/>').attr('data-file', fileName).attr('name', fieldName).val(file.newFileName).appendTo($div);

                $container.find('.file-uploaded').html($div);
                $div.prependTo($container.find('.file-uploaded')).fadeIn('fast');
            }

            refreshForm(containerDivId);
        }

        function removeImg(containerDivId, isMultiple) {
            var $container = $('#' + containerDivId);
            if (isMultiple) {
                var $inputs = $container.find('input:checked');
                for (var i = 0; i < $inputs.length; i++) {
                    $($inputs[i]).parent().remove();
                }

                if ($container.find('.file-list').children().length == 0)
                    $container.find('.file-remove-btn').hide();
            }
            else {
                var $input = $('#@ContainerId').find('.file-uploaded-single input');
                $input.parent().remove();
                $container.find('.file-upload-empty').fadeIn('fast');
                $container.find('.file-remove-btn').hide();
            }

            refreshForm(containerDivId);
        }

        function refreshForm(containerDivId){
            var $container = $('#' + containerDivId);
            var $form = $container.parents('form');
            var $formGroupCustoms = $form.find('.form-group-custom-field');
            for (var i = 0; i < $formGroupCustoms.length; i++) {
                var $current = $($formGroupCustoms[i]);
                var $inputs = $current.find('input[name]');
                for (var j = 0; j < $inputs.length; j++) {
                    var $input =$($inputs[j]);
                    var inputAtrrName = $input.attr('name');
                    var newName = inputAtrrName.replace(/\[(.+?)\]/,'[' + i + ']');
                    $input.attr('name',newName);
                }
            }
        }

        $('.file-remove-btn').bind('click', function(){
            removeImg($(this).data('container-id'), $(this).data('multiple'));
        });
    </script>
}

@using (Html.Delayed())
{
    <script>
        $('#@ContainerId').find('.fileupload').fileupload({
            url:'@Url.Action("Uploads", "FileUpload")',
            dataType: 'json',
            formData: { fileGroup: @Convert.ToInt32(FileGroups.Other) },
            maxFileSize: 999000,
            //acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
            done: function (e, data) {
                $.each(data.result, function (index, file) {
                    var a = $('#@ContainerId .file-uploaded-single input').val();
                    if (a)
                        $.ajax({
                            url: '@Url.Action("Delete", "FileManager")',
                            type: 'DELETE',
                            data: { 'id': a },
                            traditional: true,
                            success: function () {
                                $('#@ContainerId').find('.file-uploaded-single').remove();
                                $('#@ContainerId').find('.file-upload-new').fadeIn('fast');
                                $('#@ContainerId').find('.file-remove-btn').hide();
                                addImg('@ContainerId', @Multiple.ToString().ToLower(), file, '@FieldName');
                            }
                        });
                    else
                        addImg('@ContainerId', @Multiple.ToString().ToLower(), file, '@FieldName');
                });
            },
            always: function(e, data){
                $('#@ContainerId').find('.fileuploadProgress').fadeOut('fast');
            },
            progressall: function (e, data) {
                $('#@ContainerId').find('.fileuploadProgress').fadeIn('fast');
            }
        }).bind('fileuploadprocessfail', function (e, data) {
            alert(data.files[data.index].error);
        });
    </script>
}
