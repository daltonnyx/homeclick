@using VCMS.Lib.Models
@using VCMS.Lib.Common
@using VCMS.Lib.Resources
@using Newtonsoft.Json
@model Post

@{
    ViewBag.Title = Strings.Collections;
    ViewBag.FormName = Model.Title;
}

<div class="content">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        if (Model != null)
        {
            @Html.HiddenFor(m => m.Id)
        }
        <div class="row">
            <fieldset class="col-md-9">
                <div class="form-group">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", placeholder = "Title" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(model => model.Excerpt, new { @class = "form-control", placeholder = "Excerpt" })
                </div>
                <div class="form-group">
                    @Html.TextAreaFor(model => model.Content, new { @class = "form-control text-editor" })
                </div>
                <hr />
                @*
    <div class="form-group">
        <h3>Slide Images</h3>
        @{
            var paramFiles = new
            {
                Value = Model?.Files != null ? Model.Files.Select(o => o.FullFileName) : null,
                FieldName = Html.NameFor(m => m.SlideImages).ToString(),
                Multiple = true ,
                Accept = "image/*",
                FileManagerId = "#lgx94",
                ContainerId = "Images"
            };
            @Html.Partial("Widgets/SelectFiles", paramFiles)
        }
                </div>*@
                <hr />
                <div class="form-group">
                    <h3>Products</h3>
                    <div class="row">
                        <div class="col-md-4 m-b-15">
                            <h5 class="">Add product</h5>
                            <div class="">
                                <div class="form-control-custom">
                                    @Html.DropDownList(ConstantKeys.PRODUCTS, new SelectList(ViewData[ConstantKeys.PRODUCTS] as IEnumerable<Product>, "Id", "Name", null), new { @class = "chosen", data_child = "#" + ConstantKeys.PRODUCT_OPTIONS, data_placeholder = "Products", style = "display:none" })
                                </div>
                                <div class="form-control-custom">
                                    @{
                                        var productOption = new List<CustomSelectItem>();
                                        foreach (var product in ViewData[ConstantKeys.PRODUCTS] as IEnumerable<Product>)
                                        {
                                            productOption.AddRange(product.Product_Options.Select(o => new CustomSelectItem
                                            {
                                                Value = o.Id.ToString(),
                                                Text = o.Name,
                                                HtmlAttributes = new { data_parent = product.Id, data_parent_name = product.Name, data_thumb = o.PreviewImage.FullFileName }
                                            }));
                                        }
                                    }
                                    @Html.CustomDropdownList(ConstantKeys.PRODUCT_OPTIONS, productOption, null, null, new { @class = "form-control-custom chosen", data_placeholder = "Options", style = "display:none" })
                                </div>
                                <div class="">
                                    <span class="btn products-add-btn"><i class="fa fa-plus"></i></span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-8 products-added">
                            @if (Model.Post_ProductOptions.Count == 0)
                            {
                                <span class="empty">
                                    <i>Empty!</i>
                                </span>
                            }
                            else
                            {
                                foreach (var item in Model.Post_ProductOptions)
                                {
                                    <div class="form-control-custom product" style="border: 1px solid lightgray; padding: 10px;">
                                        <img class="pull-left m-r-15" style="width:54px;" src="@Url.GetFilePath("images",item.ProductOption.PreviewImage.FullFileName)">
                                        <a style="display: block;margin-bottom: 10px;" href="@Url.Action("Edit","Products", new { id = item.ProductOptionId})">@item.ProductOption.Product.Name -  @item.ProductOption.Name</a>
                                        <input type="number" placeholder="Quantity" style="border: 1px solid lightgray; padding: 3px;" name="@string.Format("{0}[{1}]",Html.NameFor(o => o.ProductOptionSets), item.ProductOptionId)" value="@item.Quantity">
                                        <div class="btn-group pull-right l-h-26">
                                            <span class="btn-link red" onclick="deleteProduct(@item.ProductOptionId)">Delete</span>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
                @if (Model.Room?.Image != null)
                {
                    <div class="form-group">
                        <div id="imgdiv" class="taggd">
                            <img id="image" class="img" style="width:100%;" src="@Url.GetImageUploadFolder()/@Model.Room.Image.FullFileName" />
                            @foreach (var item in Model.Post_Details.Where(o => o.Name == "popupImages"))
                            {
                                string json = item.Value.Replace('\'','"');
                                var values = JsonConvert.DeserializeObject<Dictionary<string, string>>(json);

                                <span class="taggd__button" style="left:@values["positionX"]%;top:@values["positionY"]%;transform:rotate(@values["rotate"]deg)" data-id="@item.Id" data-rotate="@values["rotate"]" data-image="@values["image"]" onclick="taggdButtonClicked(this);">
                                    <input name="popupImages" value="@values["image"]" type="hidden" />
                                </span>
                            }
                        </div>
                        <div>
                            <input id="ex1" data-slider-id='ex1Slider' type="text" data-slider-min="0" data-slider-max="360" data-slider-step="1" data-slider-value="14" />
                            <span class="btn btn-default" da data-action="add-image" data-toggle="modal" data-target="#lgx94" data-field-name="popupImages" data-is-customfield="true" data-multiple="false"><i class="fa fa-image"></i></span>
                            <span class="btn btn-default" data-action="delete"><i class="fa fa-trash"></i></span>
                        </div>
                    </div>
                }
            </fieldset>
            <fieldset class="col-md-3">
                <div class="form-group">
                    @{
                        var param = new Dictionary<string, object> {
                                { ConstantKeys.FIELD_NAME, Html.NameFor(o => o.SelectedCategories).ToString()},
                                { ConstantKeys.CATEGORIES, ViewData[ConstantKeys.CATEGORIES]},
                                { ConstantKeys.SELECTED_CATEGORIES, Model.Categories.Select(o => o.Id) },
                                { "ContainerClass", "widget"}
                            };
                        @Html.Partial("Widgets/CategoriesCheckBoxList", param);
                    }
                </div>
                <hr/>
                <div class="form-group">
                    <h3>Room</h3>
                    <div>
                        @{
                            var projects = (ViewData[ConstantKeys.PROJECTS] as IEnumerable<Project>).ToList();
                            var departments = new List<Department>();
                            var floors = new List<Floor>();
                            var rooms = new List<Room>();
                            projects.ForEach(o => departments.AddRange(o.Departments));
                            departments.ForEach(o => floors.AddRange(o.Floors));
                            floors.ForEach(o => rooms.AddRange(o.Rooms));
                        }
                        @Html.DropDownList(ConstantKeys.PROJECTS, new SelectList(projects, "Id", "Name", Model?.Room?.Floor?.Department?.Project?.Id), new { @class = "form-control-custom chosen", data_placeholder = "Select", data_child = "#" + ConstantKeys.DEPARTMENTS, style = "display:none" })
                        @Html.CustomDropdownList(ConstantKeys.DEPARTMENTS, departments.Select(o => new CustomSelectItem { Value = o.Id.ToString(), Text = o.Name, HtmlAttributes = new { data_parent = o.ProjectId } }), null, null, new { @class = "form-control-custom chosen", data_placeholder = "Select", data_child = "#" + ConstantKeys.FLOORS, style = "display:none", data_default_value = Model?.Room?.Floor?.Department?.Id })   
                        @Html.CustomDropdownList(ConstantKeys.FLOORS, floors.Select(o => new CustomSelectItem { Value = o.Id.ToString(), Text = o.Name, HtmlAttributes = new { data_parent = o.DepartmentId } }), Model?.Room?.Floor?.Id.ToString(), null, new { @class = "form-control-custom chosen", data_placeholder = "Select", data_child = "#" + Html.NameFor(o => o.RoomId), style = "display:none", data_default_value = Model?.Room?.Floor?.Id })
                        @Html.CustomDropdownListFor(m => m.RoomId, rooms.Select(o => new CustomSelectItem { Value = o.Id.ToString(), Text = o.Name, HtmlAttributes = new { data_parent = o.FloorId } }), "Select", new { @class = "form-control-custom chosen", data_placeholder = "Select", style = "display:none", data_default_value = Model?.Room?.Id })               
                    </div>
                </div>
                <hr />
                <div class="form-group">
                    @{
                        <h3>Preview Image</h3>
                        @Html.Partial("Widgets/SelectFiles",
                        new
                        {
                            Value = Model?.ImageFile != null ? Model.ImageFile.FullFileName : string.Empty,
                            FieldName = Html.NameFor(m => m.ImageId).ToString(),
                            Accept = "image/*",
                            FileManagerId = "#lgx94"
                        })
                    }
                </div>
                <hr />
                <div class="form-group">
                    <h3>Options</h3>
                    <label class="checkbox">
                        @Html.CheckBoxFor(m => m.Featured) Featured
                    </label>
                    <label class="checkbox">
                        @Html.CheckBoxFor(m => m.Status) Publish
                    </label>
                </div>
            </fieldset>
        </div>
        <hr />
        <div class="clearfix">
            <input type="submit" value="Update" class="btn btn-primary pull-right" />
        </div>
    }
</div>
@{
    var fileManagerParam = new Dictionary<string, object> {
            { "ContainerId" , "lgx94"}

    };

    @Html.Partial("Widgets/FileManager", fileManagerParam)
}

@Html.Partial("Widgets/TextEditorFull")

@section breadcrumb {
    <li>
        <a href="@Url.Action("Dashboard","Pages")">
            <i class="fa fa-home"></i> Home
        </a>
        <span class="divider"><i class="fa fa-angle-right"></i></span>
    </li>
    <li>
        <a href="@Url.Action("List")">
            @ViewBag.Title
        </a>
        <span class="divider"><i class="fa fa-angle-right"></i></span>
    </li>
    <li class="active">@ViewBag.FormName</li>
}

@section links {
    <link href="~/Areas/Manager/Content/lib/jquery-chosen/Chosen.min.css" rel="stylesheet" />
    @Html.RenderDelayed("TextEditorFull-style")
    @Html.RenderDelayed("jquery-uploads-style")
    @Html.RenderDelayed("FileManager-style")
    <link href="~/Content/lib/bootstrap-slider-master/dist/css/bootstrap-slider.css" rel="stylesheet" />
    <link href="~/Content/lib/taggd-master/dist/taggd.css" rel="stylesheet" />
    <style>
        .taggd__button {
            width: 0;
            height: 0;
            background-color: transparent;
            border-left: 10px solid transparent;
            border-right: 10px solid transparent;
            border-bottom: 30px solid black;
        }
        .taggd-clicked {
            border-bottom: 30px solid red;
        }
        
    </style>

}

@section scripts {
    <script src="~/Areas/Manager/Content/lib/jquery-chosen/chosen.jquery.min.js"></script>
    @Html.RenderDelayed("TextEditorFull-script")
    @Html.RenderDelayed("jquery-uploads-js")
    @Html.RenderDelayed("SelectImages-function")
    @Html.RenderDelayed("SelectImages-script")
    @Html.RenderDelayed("FileManager-script")
    <script src="~/Content/lib/bootstrap-slider-master/dist/bootstrap-slider.js"></script>
    <script src="~/Content/lib/taggd-master/dist/taggd.js"></script>
    <script>
        $(document).ready(function () {
            var image = document.getElementById('image');
            var settings = {
                show: 'none',
                hide: 'mouseleave',
            };

            //var taggd = $(image).taggd();
            //var taggd = new Taggd(image, settings);

            //taggd.enableEditorMode();
        });

        var lastTaggdButtonClicked = null;
        var $slider = $('#ex1');
        if ($slider.length > 0) {
            //Slider
            var slider = $('#ex1').slider({
                formatter: function (value) {
                    return 'Current value: ' + value;
                }
            }).change(function (evt) {
                var newValue = evt.value.newValue;
                var oldValue = evt.value.oldValue;
                if (lastTaggdButtonClicked) {
                    $(lastTaggdButtonClicked).css({
                        "transform": "rotate(" + newValue + "deg)"
                    });
                    $(lastTaggdButtonClicked).data("rotate", newValue);
                }
            });
        };

        function taggdButtonClicked(elem) {
            if (lastTaggdButtonClicked)
                $(lastTaggdButtonClicked).removeClass("taggd-clicked")

            $(elem).addClass("taggd-clicked");

            var rotateVal = $(elem).data("rotate");
            $slider.slider('setValue', rotateVal);

            lastTaggdButtonClicked = elem;
        };

        //Delete marker
        $('span[data-action="delete"').on("click", function () {
            if (lastTaggdButtonClicked) {
                $(lastTaggdButtonClicked).remove();
            }
        });
        $('span[data-action="add-image"').on("click", function () {
            var handler = $(this);
            if (lastTaggdButtonClicked) {
                if (!$(lastTaggdButtonClicked).attr("id")) {
                    var random = randomString(5, 'Aa');
                    $(lastTaggdButtonClicked).attr("id", random);
                    $(lastTaggdButtonClicked).data("insert-target", "#" + random);
                }
                $(this).data("container-id", $(lastTaggdButtonClicked).attr("id"));
            }
        });

        $('#image').click(function () {
            var $img = $(this);
            var ratio = this.naturalWidth / $img.width();
            var x = (((event.pageX - $img.offset().left) * ratio) / this.naturalWidth * 100);
            var y = (((event.pageY - $img.offset().top) * ratio) / this.naturalHeight * 100);
            addLabel(x, y, 0);
        });

        function addLabel(x, y, r, i) {
            var $taggd = $('.taggd').first();

            var $label = $('<label class="taggd__button"/>')
                .css({
                    "left": x + "%",
                    "top": y + "%",
                    "transform": "rotate(" + r + "deg)"
                }).data("rotate", r);

            if (i)
                $label.data("image", i + ".jpg");

            $taggd.append($label);
            $label.on("click", function () {
                taggdButtonClicked(this);
            });
        }

        $('form').submit(function (evt) {
            var inputs = $('input[name="popupImages"]');
            for (var i = 0; i < inputs.length; i++) {
                var $parent = $(inputs[i]).parents(".taggd__button");
                var $divContainer = $parent.parent();
                var $img = $divContainer.find('#image');

                $parent.addClass('form-group-custom-field');

                var parentId = $parent.data("id");
                var json = {
                    positionX: parseFloat($parent.css("left")) / $img.width() * 100,
                    positionY: parseFloat($parent.css("top")) / $img.height() * 100,
                    rotate: $parent.data("rotate"),
                    image: $(inputs[i]).val()
                };
                var jsonStr = JSON.stringify(json).replace(/"/g, "'");

                $parent.append('<input name="Post_Details[0].Id" type="hiden" value="' + (parentId != null ? parentId : 0) + '"/>')
                $parent.append('<input name="Post_Details[0].Name" type="hiden" value="popupImages"/>')
                $parent.append('<input name="Post_Details[0].Value" type="hiden" value="' + jsonStr + '"/>')

                $(inputs[i]).val(json);
                refreshForm('#' + $parent.attr('id'));
            }
        });

        function deleteProduct(productOptionId) {
            $('#@ConstantKeys.PRODUCT_OPTIONS option[value="' + productOptionId + '"]').prop('disabled', false);
            if ($('#@ConstantKeys.PRODUCT_OPTIONS').hasClass('chosen'))
                $('#@ConstantKeys.PRODUCT_OPTIONS').trigger('chosen:updated');
            $(event.target).parents('div.product').remove();
        }

        function AddProduct(container, productName, productOptionName, productOptionThumb, productOptionId, quantity) {
            var $div = $('<div class="form-control-custom product" style="border: 1px solid lightgray; padding: 10px;"/>');
            var $img = $('<img class="pull-left m-r-15" style="width:54px;"/>').attr('src', '@Url.GetImageUploadFolder()' + productOptionThumb).appendTo($div);
            var $a = $('<a style="display: block;margin-bottom: 10px;"/>').attr('href', '@Url.Action("Edit", "Products")\?id=' + productOptionId).text(productName + ' - ' + productOptionName).appendTo($div);;
            var $input = $('<input type="number" placeholder="Quantity" style="border: 1px solid lightgray; padding: 3px;"/>').attr('name', '@Html.NameFor(m => m.ProductOptionSets)\[' + productOptionId + ']').appendTo($div);
            var $btnGroup = $('<div class="btn-group pull-right l-h-26" />').appendTo($div);
            var $btnDelete = $('<span class="btn-link red" onclick="deleteProduct(' + productOptionId + ')">Delete</span>').appendTo($btnGroup);
            $(container).append($div);
            if ($(container).find('div').length > 0)
                $(container).find('.empty').hide();
            else
                $(container).find('.empty').hide();
        };

        $('.products-add-btn').on('click', function () {
            var $this = $(this);
            var container = '.products-added';
            var productName = $('#@ConstantKeys.PRODUCT_OPTIONS option:selected').data('parent-name');
            var productOptionName = $('#@ConstantKeys.PRODUCT_OPTIONS option:selected').text();
            var productOptionThumb = $('#@ConstantKeys.PRODUCT_OPTIONS option:selected').data('thumb');
            var productOptionId = $('#@ConstantKeys.PRODUCT_OPTIONS').val();
            if (productOptionId) {
                AddProduct(container, productName, productOptionName, productOptionThumb, productOptionId);
                $('#@ConstantKeys.PRODUCT_OPTIONS option:selected').prop('disabled', true);
                $('#@ConstantKeys.PRODUCT_OPTIONS').val('');
                if ($('#@ConstantKeys.PRODUCT_OPTIONS').hasClass('chosen'))
                    $('#@ConstantKeys.PRODUCT_OPTIONS').trigger('chosen:updated');
            }
        });
    </script>
}